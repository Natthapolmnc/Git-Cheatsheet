---StageOGit---
   Untracked - ven't stor in git yet
   Working Directory -editing files
   Staged -prepare to comit for authorize the change in Local Repository
   Local Repository -Kept in the local git Repository
   Remote Repository -Kept in the hosting git Repository

---Stage Control command---
   git add #change untracked to Staged
   git reset #change Local Repository to...
      --hard (commit id) #to untracked
      --soft (commit id) #to staged
      --mixed (develop) #to working Directory Branch (develop)

   git commit -m "(in""is comment)" #commit staged to Local Repository
   git rm --cached #remove the Local Repository to Untracked
   git log #to print the history of Repository
   git clean -n #show all untracked
   git clean -df #del all untracked


---Git Branch---
   git branch # List all git branch in Repository
   git branch --all #List both remote-tracking branches and local branches.
   git branch develop #Create new git branch
   git branch --delete (name) #delete git branch (name)
   git checkout <branch name or commit id> #CD to branch name of commit that given
   git checkout -b (name) #Create that CD to (name)
   git checkout <branch name> <file name> #tranfer <filename> form working branch to <branch name>
   ---Git merge command-----
      git merge (subbranch) #acept all subbranch as one of the master commit
      --no-ff (subbranch) #ignore all subbranch then covert it to masterbrach commit
---Gitignore---
   create file name ".gitignore"
   edit .gitignore
   """ (filename)
   /(foldername)
   """
   commit it
---Remote Repository---
   In local Repository status use command
   git push -u (remote's branch name) (local's branch name) #push code to Remote
      --delete (remote's branch name) (local's branch name that pushed to repoitory) #delete the branch
   git fetch (remote's branch name) (local's branch name) #receive the file form remote repository
      --all #receive all change from all branch in remote repository
   git merge #merge remote repository with present code
   git remote add (remote's branch name) (GIT URL) #connect to remote Repository
      -v #show connected remote repository
   git pull <remote> <branch> #fetch+merge
   git clone <url> #clone remote repository